version: "2.1"
services:
  ###################
  ## ELASTICSEARCH ##
  ###################

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.8.1
  #   environment:
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - 9200:9200
  #     - 9300:9300

  # ###################
  # ##    KAFKA      ##
  # ###################

  # zookeeper:
  #   image: bitnami/zookeeper:latest
  #   container_name: zookeeper
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   ports:
  #     - 2181:2181
  # kafka:
  #   image: bitnami/kafka:latest
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes

  # ###################
  # ##     REDIS     ##
  # ###################

  # product-redis:
  #   image: docker.io/bitnami/redis:6.2
  #   container_name: product-redis
  #   environment:
  #     - ALLOW_EMPTY_PASSWORD=yes
  #     - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
  #   healthcheck:
  #     test: ["CMD-SHELL", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 1s
  #     retries: 10

  # order-redis:
  #   image: docker.io/bitnami/redis:6.2
  #   container_name: order-redis
  #   environment:
  #     - ALLOW_EMPTY_PASSWORD=yes
  #     - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
  #   healthcheck:
  #     test: ["CMD-SHELL", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 1s
  #     retries: 10

  # ###################
  # ##   POSTGRES    ##
  # ###################

  # user-db:
  #   image: "postgres"
  #   container_name: user-db
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=admin
  #     - POSTGRES_DB=boilerplate
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 1s
  #     retries: 10

  # product-db:
  #   image: "postgres"
  #   container_name: product-db
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=admin
  #     - POSTGRES_DB=boilerplate
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 1s
  #     retries: 10

  # order-db:
  #   image: "postgres"
  #   container_name: order-db
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=admin
  #     - POSTGRES_DB=boilerplate
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 1s
  #     retries: 10

  ###################
  ##    BACKEND    ##
  ###################

  rootshell:
    extends:
      file: ./packages/root/rootshell/docker-compose.yml
      service: rootshell
    depends_on:
      eureka:
        condition: service_healthy

  authservice:
    extends:
      file: ./packages/service/authservice/docker-compose.yml
      service: authservice
    depends_on:
      eureka:
        condition: service_healthy

  eureka:
    extends:
      file: ./packages/service/eurekaserver/docker-compose.yml
      service: eureka

  eventservice:
    extends:
      file: ./packages/service/eventservice/docker-compose.yml
      service: eventservice
    depends_on:
      eureka:
        condition: service_healthy

  external-gateway:
    extends:
      file: ./packages/service/gatewayservice/docker-compose.yml
      service: external-gateway
    depends_on:
      eureka:
        condition: service_started
      userservice:
        condition: service_started
      authservice:
        condition: service_started
      productservice:
        condition: service_started
      orderservice:
        condition: service_started
      eventservice:
        condition: service_started

  internal-gateway:
    extends:
      file: ./packages/service/gatewayservice/docker-compose.yml
      service: internal-gateway
    depends_on:
      eureka:
        condition: service_started
      userservice:
        condition: service_started
      authservice:
        condition: service_started
      productservice:
        condition: service_started
      orderservice:
        condition: service_started
      eventservice:
        condition: service_started

  orderservice:
    extends:
      file: ./packages/service/orderservice/docker-compose.yml
      service: orderservice
    depends_on:
      eureka:
        condition: service_healthy
      order-db:
        condition: service_healthy
      order-redis:
        condition: service_healthy

  productservice:
    extends:
      file: ./packages/service/productservice/docker-compose.yml
      service: productservice
    depends_on:
      eureka:
        condition: service_healthy
      product-db:
        condition: service_healthy
      product-redis:
        condition: service_healthy

  userservice:
    extends:
      file: ./packages/service/userservice/docker-compose.yml
      service: userservice
    depends_on:
      eureka:
        condition: service_healthy
      user-db:
        condition: service_healthy
